{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2dd62e6a-bde7-44d4-8e59-8faa7fd82758",
   "metadata": {},
   "source": [
    "# Genetic correlation across local ancestry segments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e614e9b9-6d38-4751-a6ab-20a4a7beb77c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import admix\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5900aece-ddc8-4282-a892-96e750a20876",
   "metadata": {},
   "outputs": [],
   "source": [
    "dset = admix.io.read_dataset(\"example_data/CEU-YRI\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "84f64aec-9ecb-4855-abcc-7894bddc113c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "admix.Dataset object with n_snp x n_indiv = 15357 x 10000, n_anc=2\n",
       "\tsnp: 'CHROM', 'POS', 'REF', 'ALT', 'QUAL', 'FILTER', 'INFO', 'LANC_FREQ1', 'LANC_FREQ2', 'LANC_NHAPLO1', 'LANC_NHAPLO2', 'FREQ'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9381d602-c2b5-4ec8-8db5-0652ccd9dfec",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "admix.simulate.quant_pheno: 100%|██████████████████████████████████████████████████████████████████████████| 15/15 [00:13<00:00,  1.08it/s]\n"
     ]
    }
   ],
   "source": [
    "np.random.seed(1234)\n",
    "cor = 0.9\n",
    "sim = admix.simulate.quant_pheno(dset, hsq=0.25, cor = 0.9, n_sim=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "aa715dc8-7338-4196-83be-37dd744e74de",
   "metadata": {},
   "outputs": [],
   "source": [
    "pheno_df = pd.DataFrame({\"PHENO\": sim['pheno'][:, 0], \"COVAR\": np.random.normal(size=dset.n_indiv)}, index=dset.indiv.index)\n",
    "os.makedirs(\"example_data/genet_cor/\", exist_ok=True)\n",
    "pheno_df.to_csv(\"example_data/genet_cor/pheno.tsv\", sep='\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0733a416-a95c-48fe-ae65-123b6b8a777d",
   "metadata": {},
   "source": [
    "```bash\n",
    "out_dir=example_data/genet_cor\n",
    "pfile=example_data/CEU-YRI\n",
    "```\n",
    "\n",
    "## Step 1: Compute GRM\n",
    "```bash\n",
    "mkdir -p ${out_dir}/admix-grm\n",
    "admix append-snp-info \\\n",
    "    --pfile ${pfile} \\\n",
    "    --out ${pfile}.snp_info\n",
    "\n",
    "admix admix-grm \\\n",
    "    --pfile ${pfile} \\\n",
    "    --out-prefix ${out_dir}/admix-grm/grm\n",
    "```\n",
    "\n",
    "## Step 2: Estimate genetic correlation\n",
    "```bash\n",
    "mkdir -p ${out_dir}/estimate\n",
    "# this step will take a while\n",
    "admix genet-cor \\\n",
    "    --pheno ${out_dir}/pheno.tsv \\\n",
    "    --grm-prefix ${out_dir}/admix-grm/grm \\\n",
    "    --out-dir ${out_dir}/estimate/\n",
    "\n",
    "admix summarize-genet-cor \\\n",
    "    --est-dir ${out_dir}/estimate/ \\\n",
    "    --out-prefix ${out_dir}/estimate\n",
    "\n",
    "cat ${out_dir}/estimate.summary.json\n",
    "```\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"n\": 10000,\n",
    "    \"rg_mode\": 0.875,\n",
    "    \"rg_hpdi(50%)\": [\n",
    "        0.838,\n",
    "        0.909\n",
    "    ],\n",
    "    \"rg_hpdi(95%)\": [\n",
    "        0.754,\n",
    "        0.961\n",
    "    ],\n",
    "    \"rg=1_pval\": 0.001345845749376501\n",
    "}\n",
    "```\n",
    "\n",
    "## Step 3: meta-analysis\n",
    "\n",
    "To obtain results for simulations from all correlation parameters and simulation replicates (or for all traits in real data analysis), we recommend using computing clusters to parallelize this process. After these results are obtained, one can use `admix meta-analyze-genet-cor` to meta-analyze these results. For example,\n",
    "\n",
    "```bash\n",
    "admix meta-analyze-genet-cor --loglkl-files \"${out_dir}/*.loglkl.txt\"\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
