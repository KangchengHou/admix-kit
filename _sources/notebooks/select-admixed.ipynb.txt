{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Selecting admixed individuals \n",
    "\n",
    "- **Goal**: subsetting a set of individuals that are admixed from a set of reference populations. This can be useful for subsequent analyses that focus on admixed individuals, e.g., local ancestry inference.\n",
    "- **Input**: principal components jointly calculated from the your data sets and a reference populations (e.g., 1,000 Genomes project).\n",
    "- **Output**: scores for each individual evaluating the distance to the reference populations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import admix\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from admix.data import distance_to_line, distance_to_refpop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulating the data\n",
    "First, we simulate the top 2 PCs for ancestral population 1 and 2, and some sample data. Our goal is to select a subset of admixed individuals from ancestral population 1 and 2 within the sample data for subsequent analysis.\n",
    "\n",
    "For population 1, we simulate:\n",
    "\n",
    "$\\text{PC}^{(1)} \\sim \\mathcal{N} \\left( \\begin{bmatrix} -5 \\\\ -5 \\end{bmatrix}, \\begin{bmatrix} 1/4 & 0 \\\\ 0 & 1/4 \\end{bmatrix} \\right)$\n",
    "\n",
    "For population 2, we simulate:\n",
    "\n",
    "$\\text{PC}^{(2)} \\sim \\mathcal{N} \\left( \\begin{bmatrix} 5 \\\\ 5 \\end{bmatrix}, \\begin{bmatrix} 4 & 0 \\\\ 0 & 4 \\end{bmatrix} \\right)$\n",
    "\n",
    "For sample individuals, we simulate:\n",
    "\n",
    "$\\text{PC}^{(s)} \\sim \\mathcal{N} \\left( \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}, \\begin{bmatrix} 10 & 10/3 \\\\ 10/3 & 10 \\end{bmatrix} \\right)$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# simulate 2 ancestral populations\n",
    "np.random.seed(0)\n",
    "# number of individuals in ancestral populations\n",
    "n_anc = 50\n",
    "# number of individuals in the sample\n",
    "n_sample = 30\n",
    "anc1_pc = np.random.multivariate_normal(\n",
    "    mean=[-5, -5], cov=np.array([[1 / 4, 0], [0, 1 / 4]]), size=n_anc\n",
    ")\n",
    "anc2_pc = np.random.multivariate_normal(\n",
    "    mean=[5, 5], cov=np.array([[4, 0], [0, 4]]), size=n_anc\n",
    ")\n",
    "sample_pc = np.random.multivariate_normal(\n",
    "    mean=[0, 0], cov=np.array([[1, 1 / 3], [1 / 3, 1]]) * 10, size=n_sample\n",
    ")\n",
    "\n",
    "# template function to plot the data\n",
    "def plot_data(ax):\n",
    "    \"\"\"\n",
    "    Plot the data on the given axis\n",
    "    \"\"\"\n",
    "    ax.scatter(anc1_pc[:, 0], anc1_pc[:, 1], color=\"blue\", label=\"Ancestry 1\", s=2)\n",
    "    ax.scatter(anc2_pc[:, 0], anc2_pc[:, 1], color=\"red\", label=\"Ancestry 2\", s=2)\n",
    "    ax.scatter(sample_pc[:, 0], sample_pc[:, 1], color=\"orange\", label=\"Sample\", s=2)\n",
    "    ax.legend(ncol=3, loc=\"center\", bbox_to_anchor=[0.5, 1.05], fontsize=8)\n",
    "    ax.set_aspect(\"equal\")\n",
    "    ax.set_xlabel(\"PC1\")\n",
    "    ax.set_ylabel(\"PC2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization of the simulated data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(figsize=(4, 4))\n",
    "plot_data(ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Projection distance from sample PCs to connecting line between ancestral populations\n",
    "We provide a function `distance_to_line`, which calculates the projection distance of each point to the line connecting the center of two ancestral populations \n",
    "$\\mu^{(1)} = \\overline{\\text{PC}^{(1)}}, \\mu^{(2)} = \\overline{\\text{PC}^{(2)}}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(distance_to_line.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# center of PC in ancestral populations\n",
    "anc1_mean = anc1_pc.mean(axis=0)\n",
    "anc2_mean = anc2_pc.mean(axis=0)\n",
    "samples_dists, sample_ts, sample_ns = distance_to_line(sample_pc, anc1_mean, anc2_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(figsize=(4, 4))\n",
    "plot_data(ax)\n",
    "\n",
    "ax.axline(xy1=anc1_mean, xy2=anc2_mean, color=\"black\", lw=1, ls=\"-.\")\n",
    "\n",
    "# plot the normal vector\n",
    "for t, n in zip(sample_ts, sample_ns):\n",
    "    p1 = t * anc2_mean + (1 - t) * anc1_mean\n",
    "    p2 = p1 + n\n",
    "    ax.plot([p1[0], p2[0]], [p1[1], p2[1]], color=\"black\", ls=\"--\", lw=0.5, alpha=0.5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Accounting for different variance of ancestral populations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "anc1_dists, anc1_ts, anc1_ns = distance_to_line(anc1_pc, anc1_mean, anc2_mean)\n",
    "anc2_dists, anc2_ts, anc2_ns = distance_to_line(anc2_pc, anc1_mean, anc2_mean)\n",
    "scale = 1.0\n",
    "anc1_maxdist, anc2_maxdist = np.max(anc1_dists), np.max(anc2_dists)\n",
    "anc1_maxdist, anc2_maxdist = anc1_maxdist * scale, anc2_maxdist * scale\n",
    "normal_vec = sample_ns[0] / np.linalg.norm(sample_ns[0])\n",
    "\n",
    "fill_pts = np.array(\n",
    "    [\n",
    "        anc1_mean + normal_vec * anc1_maxdist,\n",
    "        anc2_mean + normal_vec * anc2_maxdist,\n",
    "        anc2_mean - normal_vec * anc2_maxdist,\n",
    "        anc1_mean - normal_vec * anc1_maxdist,\n",
    "    ]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(figsize=(4, 4))\n",
    "plot_data(ax)\n",
    "ax.axline(xy1=anc1_mean, xy2=anc2_mean, color=\"black\", lw=1, ls=\"-.\")\n",
    "ax.fill(fill_pts[:, 0], fill_pts[:, 1], color=\"lightgray\", alpha=0.5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transforming the coordinates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(distance_to_refpop.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "anc1_dist, anc1_t = distance_to_refpop(anc1_pc, anc1_pc, anc2_pc)\n",
    "anc2_dist, anc2_t = distance_to_refpop(anc2_pc, anc1_pc, anc2_pc)\n",
    "sample_dist, sample_t = distance_to_refpop(sample_pc, anc1_pc, anc2_pc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots(figsize=(8, 4), ncols=2)\n",
    "ax = axes[0]\n",
    "plot_data(ax)\n",
    "ax.axline(xy1=anc1_mean, xy2=anc2_mean, color=\"black\", lw=1, ls=\"-.\")\n",
    "ax.fill(fill_pts[:, 0], fill_pts[:, 1], color=\"lightgray\", alpha=0.5)\n",
    "\n",
    "ax = axes[1]\n",
    "ax.scatter(anc1_t, anc1_dist, color=\"blue\", label=\"Ancestry 1\", s=2)\n",
    "ax.scatter(anc2_t, anc2_dist, color=\"red\", label=\"Ancestry 2\", s=2)\n",
    "ax.scatter(sample_t, sample_dist, color=\"orange\", label=\"Sample\", s=2)\n",
    "ax.legend(ncol=3, loc=\"center\", bbox_to_anchor=[0.5, 1.05], fontsize=8)\n",
    "ax.fill_between([0, 1], 1, color=\"lightgray\", alpha=0.5)\n",
    "ax.set_xlabel(\"Projection position\")\n",
    "ax.set_ylabel(\"Normalized distance\")\n",
    "\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Puttings things together"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# prepare sample_pc, anc1_pc, anc2_pc\n",
    "sample_dist, sample_t = distance_to_refpop(sample_pc, anc1_pc, anc2_pc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(figsize=(4, 4))\n",
    "\n",
    "# t between 0.1 and 0.9, dist < 1.0\n",
    "plot_data(ax)\n",
    "mask = (0.1 < sample_t) & (sample_t < 0.9) & (sample_dist < 1.0)\n",
    "ax.scatter(sample_pc[mask, 0], sample_pc[mask, 1], facecolors=\"none\", edgecolors=\"gray\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# helper function\n",
    "def plot_selection(t1, t2, dist, ax):\n",
    "    plot_data(ax)\n",
    "    mask = (t1 < sample_t) & (sample_t < t2) & (sample_dist < dist)\n",
    "    ax.scatter(\n",
    "        sample_pc[mask, 0],\n",
    "        sample_pc[mask, 1],\n",
    "        facecolors=\"none\",\n",
    "        edgecolors=\"black\",\n",
    "        s=15,\n",
    "    )\n",
    "    ax.set_title(\n",
    "        f\"$t \\\\in [{t1 * 100:.0f}\\%, {t2 * 100:.0f}\\%] & (dist < {dist})$\",\n",
    "        y=1.1,\n",
    "        fontsize=10,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots(figsize=(13, 4), ncols=3, sharey=True, sharex=True)\n",
    "\n",
    "# more stringent\n",
    "plot_selection(0.1, 0.9, 0.5, axes[0])\n",
    "# less stringent\n",
    "plot_selection(0.1, 0.9, 2.0, axes[1])\n",
    "# closer to ancestry 1\n",
    "plot_selection(0.1, 0.5, 2.0, axes[2])\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
