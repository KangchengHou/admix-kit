{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5dfa9e1d-6031-40b3-bed2-aafdedf93e21",
   "metadata": {},
   "source": [
    "# Polygenic scoring for each local ancestry background"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "673bbdc8-d745-48d2-b1e4-34f101fac560",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import admix\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8fcf64ad-b649-41ce-ba93-5f50579e34b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the example dataset\n",
    "dset = admix.io.read_dataset(\"example_data/CEU-YRI\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5310bbcd-e462-4151-9419-e1f6f46a1d84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CHROM</th>\n",
       "      <th>POS</th>\n",
       "      <th>REF</th>\n",
       "      <th>ALT</th>\n",
       "      <th>WEIGHT</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>snp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>22:16406147:A:G</th>\n",
       "      <td>22</td>\n",
       "      <td>16406147</td>\n",
       "      <td>A</td>\n",
       "      <td>G</td>\n",
       "      <td>-0.395390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22:16551808:T:C</th>\n",
       "      <td>22</td>\n",
       "      <td>16551808</td>\n",
       "      <td>T</td>\n",
       "      <td>C</td>\n",
       "      <td>1.332264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22:16573830:T:C</th>\n",
       "      <td>22</td>\n",
       "      <td>16573830</td>\n",
       "      <td>T</td>\n",
       "      <td>C</td>\n",
       "      <td>0.062149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22:16575525:T:C</th>\n",
       "      <td>22</td>\n",
       "      <td>16575525</td>\n",
       "      <td>T</td>\n",
       "      <td>C</td>\n",
       "      <td>0.428249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22:16576248:G:T</th>\n",
       "      <td>22</td>\n",
       "      <td>16576248</td>\n",
       "      <td>G</td>\n",
       "      <td>T</td>\n",
       "      <td>0.263856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22:50739662:G:A</th>\n",
       "      <td>22</td>\n",
       "      <td>50739662</td>\n",
       "      <td>G</td>\n",
       "      <td>A</td>\n",
       "      <td>-0.963074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22:50743331:A:G</th>\n",
       "      <td>22</td>\n",
       "      <td>50743331</td>\n",
       "      <td>A</td>\n",
       "      <td>G</td>\n",
       "      <td>-0.816075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22:50772964:T:C</th>\n",
       "      <td>22</td>\n",
       "      <td>50772964</td>\n",
       "      <td>T</td>\n",
       "      <td>C</td>\n",
       "      <td>-0.379005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22:50774447:A:C</th>\n",
       "      <td>22</td>\n",
       "      <td>50774447</td>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "      <td>0.983688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22:50780578:G:A</th>\n",
       "      <td>22</td>\n",
       "      <td>50780578</td>\n",
       "      <td>G</td>\n",
       "      <td>A</td>\n",
       "      <td>0.721975</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15357 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 CHROM       POS REF ALT    WEIGHT\n",
       "snp                                               \n",
       "22:16406147:A:G     22  16406147   A   G -0.395390\n",
       "22:16551808:T:C     22  16551808   T   C  1.332264\n",
       "22:16573830:T:C     22  16573830   T   C  0.062149\n",
       "22:16575525:T:C     22  16575525   T   C  0.428249\n",
       "22:16576248:G:T     22  16576248   G   T  0.263856\n",
       "...                ...       ...  ..  ..       ...\n",
       "22:50739662:G:A     22  50739662   G   A -0.963074\n",
       "22:50743331:A:G     22  50743331   A   G -0.816075\n",
       "22:50772964:T:C     22  50772964   T   C -0.379005\n",
       "22:50774447:A:C     22  50774447   A   C  0.983688\n",
       "22:50780578:G:A     22  50780578   G   A  0.721975\n",
       "\n",
       "[15357 rows x 5 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# construct an example SNP weights dataframe (WEIGHT column contains the per-allele effect sizes)\n",
    "df_weights = dset.snp[[\"CHROM\", \"POS\", \"REF\", \"ALT\"]].copy()\n",
    "df_weights[\"WEIGHT\"] = np.random.normal(size=len(df_weights))\n",
    "df_weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8421b78d-87cf-4291-b135-d5299b98cdef",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "admix.data.calc_partial_pgs: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [00:00<00:00, 1268.91it/s]\n"
     ]
    }
   ],
   "source": [
    "# calculate PGS for each local ancestry background\n",
    "pgs_df = admix.data.calc_partial_pgs(dset=dset[:, 0:100], df_weights=df_weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7563b542-8f58-4213-ba09-ecbeeec6f49e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ANC1</th>\n",
       "      <th>ANC2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>indiv</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Sample_1</th>\n",
       "      <td>35.638558</td>\n",
       "      <td>118.706099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample_2</th>\n",
       "      <td>-30.856414</td>\n",
       "      <td>60.780757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample_3</th>\n",
       "      <td>61.098364</td>\n",
       "      <td>-46.071822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample_4</th>\n",
       "      <td>-27.939297</td>\n",
       "      <td>28.420301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample_5</th>\n",
       "      <td>-2.792197</td>\n",
       "      <td>213.910173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample_96</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>45.962131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample_97</th>\n",
       "      <td>-58.187541</td>\n",
       "      <td>24.903466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample_98</th>\n",
       "      <td>-30.823394</td>\n",
       "      <td>39.505350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample_99</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>84.651254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample_100</th>\n",
       "      <td>-46.359911</td>\n",
       "      <td>90.501891</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 ANC1        ANC2\n",
       "indiv                            \n",
       "Sample_1    35.638558  118.706099\n",
       "Sample_2   -30.856414   60.780757\n",
       "Sample_3    61.098364  -46.071822\n",
       "Sample_4   -27.939297   28.420301\n",
       "Sample_5    -2.792197  213.910173\n",
       "...               ...         ...\n",
       "Sample_96    0.000000   45.962131\n",
       "Sample_97  -58.187541   24.903466\n",
       "Sample_98  -30.823394   39.505350\n",
       "Sample_99    0.000000   84.651254\n",
       "Sample_100 -46.359911   90.501891\n",
       "\n",
       "[100 rows x 2 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# per-allele effects x genotype dosage within each local ancestry background\n",
    "pgs_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "391f0168-dfa5-4d1e-b9b0-cad68806f1c2",
   "metadata": {},
   "source": [
    "Alternatively, this can be calculated in a command line:\n",
    "```bash\n",
    "admix calc-partial-pgs \\\n",
    "    --plink-path <plink2_prefix>.pgen \\\n",
    "    --weights-path <weight_tsv_path> \\\n",
    "    --out out\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
